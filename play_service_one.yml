---
- name: IP address calc
  hosts: localhost
  gather_facts: false
  vars:
    wanip: "{{wansubnet}}"
    lanip: "{{lansubnet}}"
  tasks:
  - name: Verify WAN subnet
    assert:
      that:
       - "wanip | ipv4"
      fail_msg: "Incorrect WAN subnet provided"
      success_msg: "WAN subnet is valid"
  - name: Verify LAN subnet
    assert:
      that:
       - "lanip | ipv4"
      fail_msg: "Incorrect LAN subnet provided"
      success_msg: "LAN subnet is valid"

  - name: define cpe wan ip variable
    set_fact:
      cpeip: "{{ wanip | ipaddr('2') }}"
     
  - name: split netowrk
    set_fact:
      getcpeip: "{{ cpeip | ipaddr('address') }}"
      cacheable: yes
  - name: print cpe wan ip variable
    debug:
      msg: "{{getcpeip}}"
  - name: define pe ip variable
    set_fact:
      peip: "{{ wanip | ipaddr('1') }}"
  - name: split netowrk
    set_fact:
      getpeip: "{{ peip | ipaddr('address') }}"
      cacheable: yes
  - name: print PE variable
    debug:
      var: getpeip
  - name: define cpe lan variables
    set_fact:
      cpelanip: "{{ lanip | ipaddr('1') }}"
  - name: split netowrk
    set_fact:
      getcpelanip: "{{ cpelanip | ipaddr('address') }}"
      getcpelanmask:  "{{ cpelanip | ipaddr('netmask') }}"
      getcpenetwork: "{{ cpelanip | ipaddr('network') }}"

  - name: print CPE LAN IP variable
    debug:
      var: getcpelanip, getcpelanmask, getcpenetwork

  - name: Split SSH allowed networks
    set_fact:
      sshnet: "{{ SSH_NETWORK_ALLOW | ipaddr('network') }}"
      sshwild: "{{ SSH_NETWORK_ALLOW | ipaddr('hostmask') }}"
    loop:
      - "{{SSH_NETWORK_ALLOW}}"
  - name: Custmer SNMP
    set_fact:
      snmpnet: "{{ acl12 | ipaddr('network') }}"
      snmpwild: "{{ acl12 | ipaddr('hostmask') }}"
    loop:
      - "{{acl12}}"
  

  - name: Create dummy host to transfer variables
    add_host:
      name: "DUMMY_HOST"
      ansible_host: "{{getcpeip}}"
      ansible_ipaddress: "{{getcpeip}}"
      # host: "{{getcpeip}}"
      gether_facts: False
      groups: dummygroup
      # ansible_python_interpreter: auto_legacy
      getcpewanip: "{{getcpeip}}"
      peip: "{{getpeip}}"
      lanip: "{{getcpelanip}}"
      lanmask: "{{getcpelanmask}}"
      lansubnetaddr: "{{getcpenetwork}}"
      hostname: "{{hostname}}"
      SSHNET: "{{sshnet}}"
      SSHWILD: "{{sshwild}}"
      SNMPNET: "{{snmpnet}}"
      SNMPWILD: "{{snmpwild}}"

  - name: Run expect commands
    #async: 30
    #poll: 2
    ansible.builtin.shell: |
      set timeout 2
      spawn telnet "{{ hostvars['DUMMY_HOST']['getcpewanip'] }}"
      expect "Password:"
      send "cisco\n"
      expect ">"
      send "enable\n"
      expect "Password:"
      send "cisco\n"
      expect "#"
      send "terminal length 0\n"
      expect "#"
      send "conf t\r"
      expect "(config)#"
      send "username admin password 0 cisco\n"
      expect "(config)#"
      send "ip domain name gtt.net\n"
      expect "(config)#"
      send "crypto key generate rsa\r"
      expect ":"
      send "2048\r"
      expect "(config)#"
      send "ip ssh version 2\r"
      expect "(config)#"
      send "aaa new-model\r"
      expect "(config)#"
      send "aaa authentication login default local\r"
      expect "(config)#"
      send "end\n"
      expect "#"
      send "exit\r"
      exit 0
    register: tclout
    args:
      executable: /usr/bin/expect
    delegate_to: bastion_host
  - name: get stdout
    debug:
      var: tclout
  
- hosts: dummygroup
  gather_facts: False
  connection: network_cli
  roles:
   - { role: service_one }
  vars:
    fname: "{{hostname}}"
    pewanipaddr: "{{ hostvars['DUMMY_HOST']['peip'] }}"
    lanip: "{{ hostvars['DUMMY_HOST']['lanip'] }}"
    lanmask:  "{{ hostvars['DUMMY_HOST']['lanmask'] }}"
    lansubnetaddr: "{{ hostvars['DUMMY_HOST']['lansubnetaddr'] }}"
  vars_files:
    - group_vars/routers.yml     
  tasks:
  - debug:
      msg: "CPE {{ hostname }} provision completed"
  - debug:
      msg: "cpeinit -t ssh -l admin -p cisco {{getcpewanip}}"
